openapi: 3.0.3
info:
  title: JWT Authentication API
  description: |
    Secure and modular JWT-based authentication system in Laravel using service-oriented architecture.

    ## Features
    - JWT-based authentication with custom claims
    - User registration and login
    - Token blacklisting on logout
    - Password reset via 6-digit OTP
    - Proper HTTP status codes
    - Clean error handling

    ## Authentication
    Protected endpoints require a Bearer token in the Authorization header:
    ```
    Authorization: Bearer {your-jwt-token}
    ```
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:8000/api
    description: Local development server
  - url: https://api.example.com/api
    description: Production server

tags:
  - name: Authentication
    description: User authentication endpoints
  - name: Password Reset
    description: Password reset endpoints
  - name: User Profile
    description: User profile endpoints

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Creates a new user account and returns JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
                - confirmed_password
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: john@example.com
                password:
                  type: string
                  format: password
                  minLength: 8
                  example: password123
                confirmed_password:
                  type: string
                  format: password
                  example: password123
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User registered successfully.
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
                      user:
                        $ref: '#/components/schemas/UserBasic'
        '400':
          description: Validation error - Password mismatch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: error
                message: Password and confirm password do not match.
                errors: {}
        '409':
          description: Email already registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: error
                message: Email is already registered.
                errors: {}

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      description: Authenticates user and returns JWT token with custom claims (email, user_id, login_time)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: john@example.com
                password:
                  type: string
                  format: password
                  example: password123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Login successful.
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        description: JWT token with custom claims (email, user_id, login_time)
                        example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
                      user:
                        $ref: '#/components/schemas/UserBasic'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: error
                message: Invalid credentials.

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      description: Invalidates the JWT token (blacklists it)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Successfully logged out.
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /auth/me:
    get:
      tags:
        - User Profile
      summary: Get authenticated user profile
      description: Returns the authenticated user's profile information from JWT token
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User profile retrieved successfully.
                  data:
                    $ref: '#/components/schemas/UserProfile'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /auth/password-reset/request:
    post:
      tags:
        - Password Reset
      summary: Request password reset OTP
      description: Sends a 6-digit OTP to user's email for password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: john@example.com
      responses:
        '200':
          description: OTP sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Password reset OTP has been sent to your email.
        '400':
          description: Email not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: error
                message: Email not found.
                errors: {}

  /auth/password-reset/confirm:
    post:
      tags:
        - Password Reset
      summary: Reset password with OTP
      description: Resets user password using the OTP sent to email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - otp
                - password
                - confirmed_password
              properties:
                email:
                  type: string
                  format: email
                  example: john@example.com
                otp:
                  type: string
                  minLength: 6
                  maxLength: 6
                  example: "123456"
                password:
                  type: string
                  format: password
                  minLength: 8
                  example: newpassword123
                confirmed_password:
                  type: string
                  format: password
                  example: newpassword123
      responses:
        '202':
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Password has been reset successfully.
        '400':
          description: Invalid or expired OTP
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: error
                message: Invalid or expired OTP.

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT token with custom claims:
        - email: User's email address
        - user_id: User's ID
        - login_time: Timestamp when token was created

  schemas:
    UserBasic:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: john@example.com

    UserProfile:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: john@example.com
        created_at:
          type: string
          format: date-time
          example: "2025-10-07T10:30:00.000000Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-10-07T10:30:00.000000Z"

    Error:
      type: object
      properties:
        status:
          type: string
          example: error
        message:
          type: string
          example: An error occurred.
        errors:
          type: object
          additionalProperties: true

  responses:
    UnauthorizedError:
      description: Unauthorized - Invalid or missing token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            tokenExpired:
              value:
                status: error
                message: Token has expired.
            tokenInvalid:
              value:
                status: error
                message: Token is invalid.
            tokenBlacklisted:
              value:
                status: error
                message: Token has been blacklisted.
            tokenMissing:
              value:
                status: error
                message: Token not provided or authorization header is missing.
